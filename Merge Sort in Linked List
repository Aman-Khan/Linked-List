    Node* findMid(Node* head){
        Node* slow=head;
        Node* fast=head->next;
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    Node* merge(Node* left, Node* right){
        if(left==NULL) return right;
        if(right==NULL) return left;
        Node* temp = new Node(-1);
        Node* ans = temp;
        
        while(left!=NULL && right!=NULL){
            if(left->data<right->data){
                temp->next = left;
                left=left->next;
                temp=temp->next;
            }
            else{
                temp->next = right;
                right = right->next;
                temp=temp->next;
            }
        }
        if(left!=NULL){
            temp->next = left;
        }
        if(right!=NULL){
            temp->next = right;
        }
        return ans->next;
    }
    Node* mergeSort(Node* head) {
        if(head==NULL || head->next == NULL) return head;
        Node* mid = findMid(head);
        Node* left = head;
        Node* right = mid->next;
        mid->next = NULL;
        
        left = mergeSort(left);
        right = mergeSort(right);
        
        Node* res = merge(left, right);
        return res;
    }
